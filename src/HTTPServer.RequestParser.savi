:enum HTTPServer.RequestParser.Token
  :member Method 0
  :member Uri 1
  :member VersionString 2
  :member HeaderName 3
  :member HeaderValue 4

:enum _RequestAt
  :member Start 0
  :member Method 1
  :member Uri 2
  :member VersionString 3
  :member HeaderLineMaybe 4
  :member HeaderName 5
  :member HeaderSpacing 6
  :member HeaderValue 7
  :member End 8

:class HTTPServer.RequestParser
  :var _state _RequestAt: _RequestAt.Start

  :fun ref reset: @_state = _RequestAt.Start

  :fun ref parse!(stream ByteStream.Reader)
    :yields HTTPServer.RequestParser.Token
    try (
      while (@_state != _RequestAt.End) (
        @_state = case @_state == (
        | _RequestAt.Start |
          _RequestAt.Method
        | _RequestAt.Method |
          stream.advance_while! -> (byte | byte != ' ')
          yield HTTPServer.RequestParser.Token.Method
          stream.advance!(1) // consume the space
          _RequestAt.Uri
        | _RequestAt.Uri |
          stream.advance_while! -> (byte | byte != ' ')
          yield HTTPServer.RequestParser.Token.Uri
          stream.advance!(1) // consume the space
          _RequestAt.VersionString
        | _RequestAt.VersionString |
          stream.advance_while! -> (byte | byte != '\r')
          if (stream.bytes_ahead < 2) error! // ensure the LF byte is ready too
          yield HTTPServer.RequestParser.Token.VersionString
          stream.advance!(2) // consume the CRLF
          _RequestAt.HeaderLineMaybe
        | _RequestAt.HeaderLineMaybe |
          if (stream.peek_byte! == '\r' && stream.peek_byte!(1) == '\n') (
            stream.advance!(2)
            _RequestAt.End
          |
            _RequestAt.HeaderName
          )
        | _RequestAt.HeaderName |
          stream.advance_while! -> (byte | byte != ':')
          yield HTTPServer.RequestParser.Token.HeaderName
          stream.advance!(1) // consume the colon
          _RequestAt.HeaderSpacing
        | _RequestAt.HeaderSpacing |
          stream.advance_while! -> (byte | byte == ' ' || byte == '\t')
          _RequestAt.HeaderValue
        | _RequestAt.HeaderValue |
          stream.advance_while! -> (byte | byte != '\r')
          if (stream.bytes_ahead < 2) error! // ensure the LF byte is ready too
          yield HTTPServer.RequestParser.Token.HeaderValue
          stream.advance!(2) // consume the CRLF
          _RequestAt.HeaderLineMaybe
        |
          // TODO: Refactor as exhaustive match to avoid unreachable else case
          _RequestAt.Start
        )
        stream.mark_here
      )
    |
      // Rewind to the mark, in case we only got partway through a token.
      // We will pick up from here at the mark when we get a new data chunk.
      stream.rewind_to_marker
      error!
    )
